[
{
    "name": "sleep_in",
    "description":
      "The parameter weekday is True if it is a weekday, and the parameter vacation is True if we are on vacation. We sleep in if it is not a weekday or we're on vacation. Return True if we sleep in.",
    "examples": [
      "(sleep_in NIL NIL) → T",
      "(sleep_in T NIL) → NIL",
      "(sleep_in NIL T) → T"
    ],
    "function_signature": "(defun sleep_in (weekday vacation)\n\t())",
    "test_cases": ["(equal (sleep_in nil nil) t)", "(equal (sleep_in t nil) nil)", "(equal (sleep_in nil t) t)", "(equal (sleep_in t t) t)"],
    "solution": "(defun sleep_in (weekday vacation)\n\t(or (not weekday) vacation))"
},

{
    "name": "monkey_trouble",
    "description":
      "We have two monkeys, a and b, and the parameters a_smile and b_smile indicate if each is smiling. We are in trouble if they are both smiling or if neither of them is smiling. Return True if we are in trouble.",
    "examples": [
      "(monkey_trouble T T) → T",
      "(monkey_trouble NIL NIL) → T",
      "(monkey_trouble T NIL) → NIL"
    ],
    "function_signature": "(defun monkey_trouble (a_smile b_smile)\n\t())",
    "test_cases": ["(equal (monkey_trouble t t) t)", "(equal (monkey_trouble nil nil) t)", "(equal (monkey_trouble t nil) nil)", "(equal (monkey_trouble nil t) nil)"],
    "solution": "(defun monkey_trouble (a_smile b_smile)\n\t(equal a_smile b_smile))"
},

{
    "name": "sum_double",
    "description":
      "Given two int values, return their sum. Unless the two values are the same, then return double their sum.",
    "examples": [
      "(sum_double 1 2) → 3",
      "(sum_double 3 2) → 5",
      "(sum_double 2 2) → 8"
    ],
    "function_signature": "(defun sum_double (a b)\n\t())",
    "test_cases": ["(equal (sum_double 1 2) 3)", "(equal (sum_double 3 2) 5)", "(equal (sum_double 2 2) 8)", "(equal (sum_double -1 0) -1)", "(equal (sum_double 3 3) 12)", "(equal (sum_double 0 0) 0)", "(equal (sum_double 0 1) 1)", "(equal (sum_double 3 4) 7)"],
    "solution": "(defun sum_double (a b)\n\t(if (= a b)\n\t\t(* a 4)\n\t\t(+ a b)))"
},


{
    "name": "diff21",
    "description":
      "Given an int n, return the absolute difference between n and 21, except return double the absolute difference if n is over 21.",
    "examples": [
      "(diff21 19) → 2",
      "(diff21 10) → 11",
      "(diff21 21) → 0"
    ],
    "function_signature": "(defun diff21 (n)\n\t())",
    "test_cases": ["(equal (diff21 19) 2)", "(equal (diff21 10) 11)", "(equal (diff21 21) 0)", "(equal (diff21 22) 2)", "(equal (diff21 25) 8)", "(equal (diff21 30) 18)", "(equal (diff21 0) 21)", "(equal (diff21 1) 20)", "(equal (diff21 2) 19)", "(equal (diff21 -1) 22)", "(equal (diff21 -2) 23)", "(equal (diff21 50) 58)"],
    "solution": "(defun diff21 (n)\n\t(if (<= n 21)\n\t\t(- 21 n)\n\t\t(* (- n 21) 2)))"
},

{
    "name": "parrot_trouble",
    "description":
      "We have a loud talking parrot. The \"hour\" parameter is the current hour time in the range 0..23. We are in trouble if the parrot is talking and the hour is before 7 or after 20. Return True if we are in trouble.",
    "examples": [
      "(parrot_trouble T 6) → T",
      "(parrot_trouble NIL 6) → NIL",
      "(parrot_trouble T 6) → NIL"
    ],
    "function_signature": "(defun parrot_trouble (talking hour)\n\t())",
    "test_cases": ["(equal (parrot_trouble t 6) t)", "(equal (parrot_trouble t 7) nil)", "(equal (parrot_trouble nil 6) nil)", "(equal (parrot_trouble t 21) t)", "(equal (parrot_trouble nil 21) nil)", "(equal (parrot_trouble nil 20) nil)" , "(equal (parrot_trouble t 23) t)", "(equal (parrot_trouble nil 23) nil)", "(equal (parrot_trouble t 20) nil)", "(equal (parrot_trouble nil 12) nil)" ],
    "solution": "(defun parrot_trouble (talking hour)\n\t(and talking (or (< hour 7) (> hour 20))))"
},

{
    "name": "makes10",
    "description":
      "Given 2 ints, a and b, return True if one if them is 10 or if their sum is 10.",
    "examples": [
      "(makes10 9 10) → T",
      "(sum_double 9 9) → NIL",
      "(sum_double 1 9) → T"
    ],
    "function_signature": "(defun makes10 (a b)\n\t())",
    "test_cases": ["(equal (makes10 9 10) t)", "(equal (makes10 9 9) nil)", "(equal (makes10 1 9) t)", "(equal (makes10 10 1) t)", "(equal (makes10 10 10) t)", "(equal (makes10 8 2) t)", "(equal (makes10 8 2) t)", "(equal (makes10 8 3) nil)", "(equal (makes10 10 42) t)", "(equal (makes10 12 -2) t)"],
    "solution": "(defun makes10 (a b)\n\t(or (= a 10) (= b 10) (= (+ a b) 10)))"
},

{
    "name": "near_hundred",
    "description":
      "Given an int n, return True if it is within 10 of 100 or 200. Note: (abs num) computes the absolute value of a number.",
    "examples": [
      "(near_hundred 93) → T",
      "(near_hundred 90) → T",
      "(near_hundred 89) → F"
    ],
    "function_signature": "(defun near_hundred (n)\n\t())",
    "test_cases": ["(equal (near_hundred 93) t)", "(equal (near_hundred 90) t)", "(equal (near_hundred 89) nil)", "(equal (near_hundred 110) t)", "(equal (near_hundred 111) nil)", "(equal (near_hundred 121) nil)", "(equal (near_hundred -101) nil)", "(equal (near_hundred -209) nil)", "(equal (near_hundred 0) nil)", "(equal (near_hundred 5) nil)", "(equal (near_hundred -50) nil)", "(equal (near_hundred 191) t)", "(equal (near_hundred 189) nil)", "(equal (near_hundred 200) t)", "(equal (near_hundred 210) t)", "(equal (near_hundred 211) nil)", "(equal (near_hundred 290) nil)"],
    "solution": "(defun near_hundred (n)\n\t(or (<= (abs (- 100 n)) 10) (<= (abs (- 200 n)) 10)))"
},


{
    "name": "pos_neg",
    "description":
      "Given 2 int values, return True if one is negative and one is positive. Except if the parameter \"negative\" is True, then return True only if both are negative.",
    "examples": [
      "(pos_neg 1 -1 NIL) → T",
      "(pos_neg -1 1 NIL) → T",
      "(pos_neg -4 -5 T) → T"
    ],
    "function_signature": "(defun pos_neg (a b negative)\n\t())",
    "test_cases": ["(equal (pos_neg 1 -1 nil) t)", "(equal (pos_neg -1 1 nil) t)", "(equal (pos_neg -4 -5 t) t)", "(equal (pos_neg -4 -5 nil) nil)", "(equal (pos_neg -4 5 nil) t)", "(equal (pos_neg -4 5 t) nil)", "(equal (pos_neg 1 1 nil) nil)", "(equal (pos_neg -1 -1 nil) nil)", "(equal (pos_neg 1 -1 t) nil)", "(equal (pos_neg 1 1 t) nil)", "(equal (pos_neg -1 -1 t) t)", "(equal (pos_neg 5 -5 nil) t)", "(equal (pos_neg -6 6 nil) t)", "(equal (pos_neg -5 -6 nil) nil)", "(equal (pos_neg -2 -1 nil) nil)", "(equal (pos_neg 1 2 nil) nil)", "(equal (pos_neg -5 6 t) nil)", "(equal (pos_neg -5 -5 t) t)"],
    "solution": "(defun pos_neg (a b negative)\n\t(if negative\n\t\t(and (< a 0) (< b 0))\n\t\t(or (and (< a 0) (> b 0)) (and (> a 0) (< b 0)))))"
},

{
    "name": "not_string",
    "description":
      "Given a string, return a new string where \"not \" has been added to the front. However, if the string already begins with \"not\", return the string unchanged.",
    "examples": [
      "(not_string \"candy\") → \"not candy\"",
      "(not_string \"x\") → \"not x\"",
      "(not_string \"not bad\") → \"not bad\""
    ],
    "function_signature": "(defun not_string (str)\n\t())",
    "test_cases": ["(equal (not_string \"candy\") \"not candy\")", "(equal (not_string \"x\") \"not x\")", "(equal (not_string \"not bad\") \"not bad\")", "(equal (not_string \"bad\") \"not bad\")", "(equal (not_string \"not\") \"not\")", "(equal (not_string \"is not\") \"not is not\")", "(equal (not_string \"no\") \"not no\")"],
    "solution": "(defun not_string (str)\n\t(if (and (>= (length str) 3) (equal (subseq str 0 3) \"not\"))\n\t\tstr\n\t\t(concatenate 'string \"not \" str)))"
},


{
    "name": "missing_char",
    "description":
      "Given a non-empty string and an int n, return a new string where the char at index n has been removed. The value of n will be a valid index of a char in the original string (i.e. n will be in the range 0..(length str) -1 inclusive).",
    "examples": [
      "(missing_char \"kitten\" 1) → \"ktten\"",
      "(missing_char \"kitten\" 0) → \"itten\"",
      "(missing_char \"kitten\" 4) → \"kittn\""
    ],
    "function_signature": "(defun missing_char (str n)\n\t())",
    "test_cases": ["(equal (missing_char \"kitten\" 1) \"ktten\")", "(equal (missing_char \"kitten\" 0) \"itten\")", "(equal (missing_char \"kitten\" 4) \"kittn\")", "(equal (missing_char \"Hi\" 0) \"i\")", "(equal (missing_char \"Hi\" 1) \"H\")", "(equal (missing_char \"code\" 0) \"ode\")", "(equal (missing_char \"code\" 1) \"cde\")", "(equal (missing_char \"code\" 2) \"coe\")", "(equal (missing_char \"code\" 3) \"cod\")", "(equal (missing_char \"chocolate\" 8) \"chocolat\")"   ],
    "solution": "(defun missing_char (str n)\n\t(remove (aref str n) str :start n))"
},


{
  "name": "factorial",
  "description": "Factorial is a non-negative integer. It is the product of all positive integers less than or equal to that number you ask for factorial.",
  "examples": [
    "(factorial 5) → 120",
    "(factorial 6) → 720",
    "(factorial 1) → 1"
  ],
  "function_signature": "(defun factorial (n)\n\t())",
  "test_cases": ["(equal (factorial 5) 120)", "(equal (factorial 6) 720)", "(equal (factorial 1) 1)", "(equal (factorial 12) 479001600)", "(equal (factorial 8) 40320)", "(equal (factorial 3) 6)", "(equal (factorial 2) 2)", "(equal (factorial 0) 1)"],
  "solution": "(defun factorial (n)\n\t(if (= n 0)\n\t\t1\n\t\t(* n (factorial (- n 1)))))"
}


]

